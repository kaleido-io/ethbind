{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Challenges the swagger generator to use lots of types",
    "title": "abicoderv2",
    "version": "1.0"
  },
  "host": "localhost",
  "basePath": "/contracts/0x0123456789abcdef0123456789abcdef0123456",
  "paths": {
    "/inOutType1": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "inOutType1((string,uint232,(string,string,address,bytes),(string,string,address,bytes)[])) [read only]",
        "operationId": "inOutType1_get",
        "parameters": [
          {
            "type": "string",
            "description": "(string,uint232,(string,string,address,bytes),(string,string,address,bytes)[])",
            "name": "arg1",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/fromParam"
          },
          {
            "$ref": "#/parameters/valueParam"
          },
          {
            "$ref": "#/parameters/gasParam"
          },
          {
            "$ref": "#/parameters/gaspriceParam"
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "schema": {
              "$ref": "#/definitions/inOutType1_outputs"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "inOutType1((string,uint232,(string,string,address,bytes),(string,string,address,bytes)[])) [read only]",
        "operationId": "inOutType1_post",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/inOutType1_inputs"
            }
          },
          {
            "$ref": "#/parameters/fromParam"
          },
          {
            "$ref": "#/parameters/valueParam"
          },
          {
            "$ref": "#/parameters/gasParam"
          },
          {
            "$ref": "#/parameters/gaspriceParam"
          },
          {
            "$ref": "#/parameters/syncParam"
          },
          {
            "$ref": "#/parameters/callParam"
          },
          {
            "$ref": "#/parameters/privateFromParam"
          },
          {
            "$ref": "#/parameters/privateForParam"
          },
          {
            "$ref": "#/parameters/blocknumberParam"
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "schema": {
              "$ref": "#/definitions/inOutType1_outputs"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "properties": {
        "error": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "inOutType1_inputs": {
      "type": "object",
      "properties": {
        "arg1": {
          "description": "(string,uint232,(string,string,address,bytes),(string,string,address,bytes)[])",
          "type": "object"
        }
      }
    },
    "inOutType1_outputs": {
      "type": "object",
      "properties": {
        "out1": {
          "description": "(string,uint232,(string,string,address,bytes),(string,string,address,bytes)[])",
          "type": "object"
        }
      }
    }
  },
  "parameters": {
    "blocknumberParam": {
      "type": "string",
      "description": "The target block number for eth_call requests. One of 'earliest/latest/pending', a number or a hex string (header: x-kaleido-blocknumber)",
      "name": "kld-blocknumber",
      "in": "query"
    },
    "callParam": {
      "type": "boolean",
      "description": "Perform a read-only call with the same parameters that would be used to invoke, and return result (header: x-kaleido-call)",
      "name": "kld-call",
      "in": "query",
      "allowEmptyValue": true
    },
    "fromParam": {
      "type": "string",
      "description": "The 'from' address (header: x-kaleido-from)",
      "name": "kld-from",
      "in": "query"
    },
    "gasParam": {
      "type": "integer",
      "description": "Gas to send with the transaction (auto-calculated if not set) (header: x-kaleido-gas)",
      "name": "kld-gas",
      "in": "query",
      "allowEmptyValue": true
    },
    "gaspriceParam": {
      "type": "integer",
      "description": "Gas Price offered (header: x-kaleido-gasprice)",
      "name": "kld-gasprice",
      "in": "query",
      "allowEmptyValue": true
    },
    "privacyGroupIdParam": {
      "type": "string",
      "description": "Private transaction group ID (header: x-kaleido-privacyGroupId)",
      "name": "kld-privacygroupid",
      "in": "query"
    },
    "privateForParam": {
      "type": "string",
      "description": "Private transaction recipients (comma separated or multiple params) (header: x-kaleido-privatefor)",
      "name": "kld-privatefor",
      "in": "query"
    },
    "privateFromParam": {
      "type": "string",
      "description": "Private transaction sender (header: x-kaleido-privatefrom)",
      "name": "kld-privatefrom",
      "in": "query"
    },
    "registerParam": {
      "type": "string",
      "description": "Register the installed contract on a friendly path (overwrites existing) (header: x-kaleido-register)",
      "name": "kld-register",
      "in": "query"
    },
    "syncParam": {
      "type": "boolean",
      "default": true,
      "description": "Block the HTTP request until the tx is mined (does not store the receipt) (header: x-kaleido-sync)",
      "name": "kld-sync",
      "in": "query",
      "allowEmptyValue": true
    },
    "valueParam": {
      "type": "integer",
      "description": "Ether value to send with the transaction (header: x-kaleido-ethvalue)",
      "name": "kld-ethvalue",
      "in": "query",
      "allowEmptyValue": true
    }
  }
}